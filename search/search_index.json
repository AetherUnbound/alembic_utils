{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Alembic Utils Documentation : https://olirice.github.io/alembic_utils Source Code : https://github.com/olirice/alembic_utils Autogenerate Support for PostgreSQL Functions and (soon) Views Alembic is the defacto migration tool for usage with SQLAlchemy . Without extensions, alembic can detect local changes to SQLAlchemy models and autogenerate a database migration or \"revision\" script. That revision can be applied to update the database's schema to match the SQLAlchemy model definitions. Alembic Utils is an extension to alembic that adds autogeneration support for PostgreSQL functions and views. Visit the quickstart guide for usage instructions. \u2014\u2014 \u2014\u2014","title":"Introduction"},{"location":"#alembic-utils","text":"Documentation : https://olirice.github.io/alembic_utils Source Code : https://github.com/olirice/alembic_utils Autogenerate Support for PostgreSQL Functions and (soon) Views Alembic is the defacto migration tool for usage with SQLAlchemy . Without extensions, alembic can detect local changes to SQLAlchemy models and autogenerate a database migration or \"revision\" script. That revision can be applied to update the database's schema to match the SQLAlchemy model definitions. Alembic Utils is an extension to alembic that adds autogeneration support for PostgreSQL functions and views. Visit the quickstart guide for usage instructions. \u2014\u2014 \u2014\u2014","title":"Alembic Utils"},{"location":"api/","text":"API Reference alembic_utils.replaceable_entity. register_entities ( entities , schemas=None , exclude_schemas=None ) Create an event listener to watch for changes in registered entities when migrations are created using alembic revision --autogenerate Parameters: entities - List[ReplaceableEntity] : A list of entities (PGFunction, PGView, etc) to monitor for revisions schemas - Optional[List[str]] : A list of SQL schema names to monitor. Note, schemas referenced in registered entities are automatically monitored. exclude_schemas - Optional[List[str]] : A list of SQL schemas to ignore. Note, explicitly registered entities will still be monitored. # migrations/env.py from alembic_utils.replaceable_entity import register_entities from app.functions import my_function from app.views import my_view register_entities ( entities = [ my_function , my_view ], exclude_schema = [ 'audit' ]) class alembic_utils.pg_function. PGFunction ( schema , signature , definition ) A PostgreSQL Function compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL function's call signature definition - str : The remainig function body and identifiers from_sql ( sql ) Create an instance instance from a SQL string from_path ( path ) Create an instance instance from a SQL file path from alembic_utils.pg_function import PGFunction to_lower = PGFunction ( schema = \"public\" , signature = \"to_lower(some_text text)\" , definition = \"returns text as $$ lower(some_text) $$ language sql\" ) class alembic_utils.pg_view. PGView ( schema , signature , definition ) A PostgreSQL View compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL view's call signature definition - str : The SQL select statement body of the view from_sql ( sql ) Create an instance from a SQL string from_path ( path ) Create an instance instance from a SQL file path from alembic_utils.pg_view import PGView scifi_books = PGView ( schema = \"public\" , signature = \"scifi_books\" , definition = \"select * from books where genre='scifi'\" ) class alembic_utils.pg_trigger. PGTrigger ( schema , signature , definition , on_entity=None ) A PostgreSQL Trigger compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL function's call signature definition - str : The remainig function body and identifiers on_entity - str : fully qualifed entity that the policy applies Postgres Create Trigger Specification: CREATE [ CONSTRAINT ] TRIGGER name { BEFORE | AFTER | INSTEAD OF } { event [ OR ... ] } ON table [ FROM referenced_table_name ] [ NOT DEFERRABLE | [ DEFERRABLE ] { INITIALLY IMMEDIATE | INITIALLY DEFERRED } ] [ FOR [ EACH ] { ROW | STATEMENT } ] [ WHEN ( condition ) ] EXECUTE PROCEDURE function_name ( arguments ) from_sql ( sql ) Create an instance instance from a SQL string from_path ( path ) Create an instance instance from a SQL file path from alembic_utils.pg_trigger import PGTrigger trigger = PGTrigger ( schema = \"public\" , signature = \"lower_account_email\" , on_entity = \"public.account\" , definition = \"\"\" BEFORE INSERT ON public.account FOR EACH ROW EXECUTE FUNCTION public.downcase_email() \"\"\" , ) class alembic_utils.pg_policy. PGPolicy ( schema , signature , definition , on_entity=None ) A PostgreSQL Policy compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL policy name and tablename, separated by \".\" definition - str : The definition of the policy, incl. permissive, for, to, using, with check on_entity - str : fully qualifed entity that the policy applies from_sql ( sql ) Create an instance instance from a SQL string from_path ( path ) Create an instance instance from a SQL file path from alembic_utils.pg_policy import PGPolicy policy = PGPolicy ( schema = \"public\" , signature = \"allow_read\" , on_entity = \"public.account\" , definition = \"\"\" AS PERMISSIVE FOR SELECT TO api_user USING (id = current_setting('api_current_user', true)::int) \"\"\" , )","title":"API Reference"},{"location":"api/#api-reference","text":"alembic_utils.replaceable_entity. register_entities ( entities , schemas=None , exclude_schemas=None ) Create an event listener to watch for changes in registered entities when migrations are created using alembic revision --autogenerate Parameters: entities - List[ReplaceableEntity] : A list of entities (PGFunction, PGView, etc) to monitor for revisions schemas - Optional[List[str]] : A list of SQL schema names to monitor. Note, schemas referenced in registered entities are automatically monitored. exclude_schemas - Optional[List[str]] : A list of SQL schemas to ignore. Note, explicitly registered entities will still be monitored. # migrations/env.py from alembic_utils.replaceable_entity import register_entities from app.functions import my_function from app.views import my_view register_entities ( entities = [ my_function , my_view ], exclude_schema = [ 'audit' ]) class alembic_utils.pg_function. PGFunction ( schema , signature , definition ) A PostgreSQL Function compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL function's call signature definition - str : The remainig function body and identifiers from_sql ( sql ) Create an instance instance from a SQL string from_path ( path ) Create an instance instance from a SQL file path from alembic_utils.pg_function import PGFunction to_lower = PGFunction ( schema = \"public\" , signature = \"to_lower(some_text text)\" , definition = \"returns text as $$ lower(some_text) $$ language sql\" ) class alembic_utils.pg_view. PGView ( schema , signature , definition ) A PostgreSQL View compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL view's call signature definition - str : The SQL select statement body of the view from_sql ( sql ) Create an instance from a SQL string from_path ( path ) Create an instance instance from a SQL file path from alembic_utils.pg_view import PGView scifi_books = PGView ( schema = \"public\" , signature = \"scifi_books\" , definition = \"select * from books where genre='scifi'\" ) class alembic_utils.pg_trigger. PGTrigger ( schema , signature , definition , on_entity=None ) A PostgreSQL Trigger compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL function's call signature definition - str : The remainig function body and identifiers on_entity - str : fully qualifed entity that the policy applies Postgres Create Trigger Specification: CREATE [ CONSTRAINT ] TRIGGER name { BEFORE | AFTER | INSTEAD OF } { event [ OR ... ] } ON table [ FROM referenced_table_name ] [ NOT DEFERRABLE | [ DEFERRABLE ] { INITIALLY IMMEDIATE | INITIALLY DEFERRED } ] [ FOR [ EACH ] { ROW | STATEMENT } ] [ WHEN ( condition ) ] EXECUTE PROCEDURE function_name ( arguments ) from_sql ( sql ) Create an instance instance from a SQL string from_path ( path ) Create an instance instance from a SQL file path from alembic_utils.pg_trigger import PGTrigger trigger = PGTrigger ( schema = \"public\" , signature = \"lower_account_email\" , on_entity = \"public.account\" , definition = \"\"\" BEFORE INSERT ON public.account FOR EACH ROW EXECUTE FUNCTION public.downcase_email() \"\"\" , ) class alembic_utils.pg_policy. PGPolicy ( schema , signature , definition , on_entity=None ) A PostgreSQL Policy compatible with alembic revision --autogenerate Parameters: schema - str : A SQL schema name signature - str : A SQL policy name and tablename, separated by \".\" definition - str : The definition of the policy, incl. permissive, for, to, using, with check on_entity - str : fully qualifed entity that the policy applies from_sql ( sql ) Create an instance instance from a SQL string from_path ( path ) Create an instance instance from a SQL file path from alembic_utils.pg_policy import PGPolicy policy = PGPolicy ( schema = \"public\" , signature = \"allow_read\" , on_entity = \"public.account\" , definition = \"\"\" AS PERMISSIVE FOR SELECT TO api_user USING (id = current_setting('api_current_user', true)::int) \"\"\" , )","title":"API Reference"},{"location":"examples/","text":"Example Outputs Migration for newly created function \"\"\"create Revision ID: 1 Revises: Create Date: 2020-04-22 09:24:25.556995 \"\"\" from alembic import op import sqlalchemy as sa from alembic_utils.pg_function import PGFunction # revision identifiers, used by Alembic. revision = '1' down_revision = None branch_labels = None depends_on = None def upgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\" returns text as $$ select upper(some_text) $$ language SQL; \"\"\" ) op . create_entity ( public_to_upper_6fa0de ) def downgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"# Not Used\" ) op . drop_entity ( public_to_upper_6fa0de ) Migration for updated Function \"\"\"replace Revision ID: 2 Revises: 1 Create Date: 2020-04-22 09:24:25.679031 \"\"\" from alembic import op import sqlalchemy as sa from alembic_utils.pg_function import PGFunction # revision identifiers, used by Alembic. revision = '2' down_revision = '1' branch_labels = None depends_on = None def upgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\" returns text as $$ select upper(some_text) || 'def' $$ language SQL; \"\"\" ) op . replace_entity ( public_to_upper_6fa0de ) def downgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\"returns text LANGUAGE sql AS $function$ select upper(some_text) || 'abc' $function$\"\"\" ) op . replace_entity ( public_to_upper_6fa0de )","title":"Examples"},{"location":"examples/#example-outputs","text":"","title":"Example Outputs"},{"location":"examples/#migration-for-newly-created-function","text":"\"\"\"create Revision ID: 1 Revises: Create Date: 2020-04-22 09:24:25.556995 \"\"\" from alembic import op import sqlalchemy as sa from alembic_utils.pg_function import PGFunction # revision identifiers, used by Alembic. revision = '1' down_revision = None branch_labels = None depends_on = None def upgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\" returns text as $$ select upper(some_text) $$ language SQL; \"\"\" ) op . create_entity ( public_to_upper_6fa0de ) def downgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"# Not Used\" ) op . drop_entity ( public_to_upper_6fa0de )","title":"Migration for newly created function"},{"location":"examples/#migration-for-updated-function","text":"\"\"\"replace Revision ID: 2 Revises: 1 Create Date: 2020-04-22 09:24:25.679031 \"\"\" from alembic import op import sqlalchemy as sa from alembic_utils.pg_function import PGFunction # revision identifiers, used by Alembic. revision = '2' down_revision = '1' branch_labels = None depends_on = None def upgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\" returns text as $$ select upper(some_text) || 'def' $$ language SQL; \"\"\" ) op . replace_entity ( public_to_upper_6fa0de ) def downgrade (): public_to_upper_6fa0de = PGFunction ( schema = \"public\" , signature = \"to_upper(some_text text)\" , definition = \"\"\"returns text LANGUAGE sql AS $function$ select upper(some_text) || 'abc' $function$\"\"\" ) op . replace_entity ( public_to_upper_6fa0de )","title":"Migration for updated Function"},{"location":"quickstart/","text":"Quickstart Installation Requirements Python 3.6+ First, install alembic_utils $ pip install alembic_utils Next, add \"alembic_utils\" to the logger keys in alembic.ini and a configuration for it. ... [ loggers ] keys = root , sqlalchemy , alembic , alembic_utils [ logger_alembic_utils ] level = INFO handlers = qualname = alembic_utils Reference Then add a function to your project # my_function.py from alembic_utils.pg_function import PGFunction to_upper = PGFunction ( schema = 'public' , signature = 'to_upper(some_text text)' definition = \"\"\" RETURNS text as $$ SELECT upper(some_text) $$ language SQL; \"\"\" ) and/or a view # my_view.py from alembic_utils.pg_view import PGView first_view = PGView ( schema = \"public\" , signature = \"first_view\" , definition = \"select * from information_schema.tables\" , ) Finally, update your <migrations_folder>/env.py to register your entities with alembic_utils. # <migrations_folder>/env.py # Add these lines from alembic_utils.replaceable_entity import register_entities from my_function import to_upper from my_view import first_view register_entities ([ to_upper , first_view ]) You're done! The next time you autogenerate a revision with alembic revision --autogenerate -m 'some message' Alembic will detect if your entities are new, updated, or removed & populate the revison's upgrade and downgrade sections automatically. For example outputs, check the examples .","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"Requirements Python 3.6+ First, install alembic_utils $ pip install alembic_utils Next, add \"alembic_utils\" to the logger keys in alembic.ini and a configuration for it. ... [ loggers ] keys = root , sqlalchemy , alembic , alembic_utils [ logger_alembic_utils ] level = INFO handlers = qualname = alembic_utils","title":"Installation"},{"location":"quickstart/#reference","text":"Then add a function to your project # my_function.py from alembic_utils.pg_function import PGFunction to_upper = PGFunction ( schema = 'public' , signature = 'to_upper(some_text text)' definition = \"\"\" RETURNS text as $$ SELECT upper(some_text) $$ language SQL; \"\"\" ) and/or a view # my_view.py from alembic_utils.pg_view import PGView first_view = PGView ( schema = \"public\" , signature = \"first_view\" , definition = \"select * from information_schema.tables\" , ) Finally, update your <migrations_folder>/env.py to register your entities with alembic_utils. # <migrations_folder>/env.py # Add these lines from alembic_utils.replaceable_entity import register_entities from my_function import to_upper from my_view import first_view register_entities ([ to_upper , first_view ]) You're done! The next time you autogenerate a revision with alembic revision --autogenerate -m 'some message' Alembic will detect if your entities are new, updated, or removed & populate the revison's upgrade and downgrade sections automatically. For example outputs, check the examples .","title":"Reference"},{"location":"roadmap/","text":"Roadmap Additional Requirements for 1.0 Release: Feedback from external users Autogenerate support for PostgreSQL Materialized Views","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Additional Requirements for 1.0 Release: Feedback from external users Autogenerate support for PostgreSQL Materialized Views","title":"Roadmap"}]}